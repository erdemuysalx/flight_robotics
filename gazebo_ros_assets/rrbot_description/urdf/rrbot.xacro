<?xml version="1.0"?>
<!-- Revolute-Revolute Manipulator -->
<robot name="rrbot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Constants for robot dimensions -->
    <xacro:property name="namespace" value="/rrbot"/>
    <xacro:property name="PI" value="3.1415926535897931"/>

    <!-- ros_control plugin -->

    

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>${namespace}</robotNamespace>
            <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
        </plugin>
        <plugin name="rrbot_groundtruth" filename="libgazebo_ros_p3d.so">
            <robotNamespace>${namespace}</robotNamespace>
            <frameName>world</frameName>
            <alwaysOn>true</alwaysOn>
            <bodyName>FC</bodyName>
            <topicName>position_groundtruth</topicName>
            <gaussianNoise>0.00</gaussianNoise>
            <updateRate>100.0</updateRate>
        </plugin>
        <plugin name="quadrotor_imu_gt" filename="libhector_gazebo_ros_imu.so">
            <robotNamespace>${namespace}</robotNamespace>
            <updateRate>100.0</updateRate>
            <frameId>world</frameId>
            <bodyName>FC</bodyName>
            <topicName>imu_groundtruth</topicName>
            <rpyOffset>0 0 0</rpyOffset> <!-- deprecated -->
            <gaussianNoise>0</gaussianNoise>  <!-- deprecated -->
            <accelDrift>0 0 0</accelDrift>
            <accelGaussianNoise>0 0 0</accelGaussianNoise>
            <rateDrift>0 0 0</rateDrift>
            <rateGaussianNoise>0 0 0</rateGaussianNoise>
        </plugin>
        <plugin name="quadrotor_imu_sim" filename="libhector_gazebo_ros_imu.so">
            <robotNamespace>${namespace}</robotNamespace>
            <updateRate>100.0</updateRate>
            <frameId>world</frameId>
            <bodyName>FC</bodyName>
            <topicName>sim_imu</topicName>
            <rpyOffset>0 0 0</rpyOffset> <!-- deprecated -->
            <gaussianNoise>0</gaussianNoise>  <!-- deprecated -->
            <accelDrift>0.05 0.05 0.05</accelDrift>
            <accelGaussianNoise>0.35 0.35 0.3</accelGaussianNoise>
            <rateDrift>0.1 0.1 0.1</rateDrift>
            <rateGaussianNoise>0.05 0.05 0.015</rateGaussianNoise>
        </plugin>
        <plugin name="quadrotor_baro_sim" filename="libhector_gazebo_ros_baro.so">
            <robotNamespace>${namespace}</robotNamespace>
            <updateRate>10.0</updateRate>
            <!-- <bodyName>FC</bodyName> -->
            <frameId>world</frameId>
            <topicName>sim_barometer</topicName>
            <offset>0</offset>
            <drift>10.0</drift>
            <gaussianNoise>0.1</gaussianNoise>
        </plugin>

        <plugin name="quadrotor_magnetic_sim" filename="libhector_gazebo_ros_magnetic.so">
            <robotNamespace>${namespace}</robotNamespace>
            <updateRate>10.0</updateRate>
            <bodyName>FC</bodyName>
            <frameId>world</frameId>
            <topicName>sim_magnetometer</topicName>
            <offset>0 0 0</offset>
            <drift>0.0 0.0 0.0</drift>
            <gaussianNoise>1.3e-2 1.3e-2 1.3e-2</gaussianNoise>
        </plugin>
        <plugin name="quadrotor_gps_sim" filename="libhector_gazebo_ros_gps.so">
            <robotNamespace>${namespace}</robotNamespace>
            <updateRate>5.0</updateRate>
            <bodyName>FC</bodyName>
            <frameId>world</frameId>
            <topicName>sim_gps_fix</topicName>
            <velocityTopicName>sim_gps_vel</velocityTopicName>
            <referenceLatitude>48.75</referenceLatitude>
            <referenceLongitude>9.105</referenceLongitude>
            <drift>5.0 5.0 5.0</drift>
            <gaussianNoise>0.01 0.01 0.01</gaussianNoise>
            <velocityDrift>0 0 0</velocityDrift>
            <velocityGaussianNoise>0.05 0.05 0.05</velocityGaussianNoise>
          </plugin>
    </gazebo>
    
    <!-- The ft_sensor plugin 
    <gazebo reference="$FC_joint">
      <provideFeedback>true</provideFeedback>
    </gazebo>

	
    <gazebo>
      <plugin name="ft_sensor" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>100.0</updateRate>
        <topicName>force_torque</topicName>
        <jointName>FC_joint</jointName>
     </plugin>
   </gazebo>
    
     The ft_sensor plugin -->  



    <xacro:macro name="gazebo_mat_color" params="color">
        <material>Gazebo/${color}</material>
    </xacro:macro>
    <material name="Black">
        <color rgba="0.0 0.0 0.0 1.0"/>
    </material>
    <material name="Blue">
        <color rgba="0.0 0.0 0.8 1.0"/>
    </material>
    <material name="Green">
        <color rgba="0.0 0.8 0.0 1.0"/>
    </material>
    <material name="Grey">
        <color rgba="0.2 0.2 0.2 1.0"/>
    </material>
    <material name="Orange">
        <color rgba="${255/255} ${108/255} ${10/255} 1.0"/>
    </material>
    <material name="Brown">
        <color rgba="${222/255} ${207/255} ${195/255} 1.0"/>
    </material>
    <material name="Red">
        <color rgba="0.8 0.0 0.0 1.0"/>
    </material>
    <material name="White">
        <color rgba="1.0 1.0 1.0 1.0"/>
    </material>

    <!-- A primitive for a box -->
    <xacro:macro name="box_base_link" params="name m x y z mat **gaz_extra">
        <link name="${name}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${x} ${y} ${z}"/>
                </geometry>
            </collision>
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${x} ${y} ${z}"/>
                </geometry>
                <material name="${mat}"/>
            </visual>
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="${m}"/>
                <inertia
                    ixx="${(m / 12.0) * (y*y + z*z)}" ixy="0.0" ixz="0.0"
                    iyy="${(m / 12.0) * (x*x + z*z)}" iyz="0.0"
                    izz="${(m / 12.0) * (x*x + y*y)}" />
            </inertial>
        </link>
        <gazebo reference="${name}">
            <xacro:gazebo_mat_color color="${mat}" />
            <mu1>0.2</mu1>
            <mu2>0.2</mu2>
        </gazebo>
        <xacro:insert_block name="gaz_extra" />
    </xacro:macro>

    <!-- A primitive for a cylinder -->
    <xacro:macro name="cylinder_base_link" params="name m l r mat">
        <link name="${name}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <cylinder length="${l}" radius="${r}" />
                </geometry>
            </collision>
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <cylinder length="${l}" radius="${r}" />
                </geometry>
                <material name="${mat}"/>
            </visual>
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="${m}"/>
                <inertia
                    ixx="${(m / 12.0) * (3*r*r + l*l)}" ixy="0.0" ixz="0.0"
                    iyy="${(m / 12.0) * (3*r*r + l*l)}" iyz="0.0"
                    izz="${(m / 2) * (r*r)}" />
            </inertial>
        </link>
        <gazebo reference="${name}">
            <xacro:gazebo_mat_color color="${mat}" />
            <mu1>0.2</mu1>
            <mu2>0.2</mu2>
        </gazebo>
        <!--xacro:insert_block name="gaz_extra" /-->
    </xacro:macro>

    <!-- A primitive for a box with lift and drag -->
    <xacro:macro name="wing" params="name m x y z mat">
        <xacro:box_base_link name="${name}" m="${m}" x="${x}" y="${y}" z="${z}" mat="${mat}">
            <plugin_extra>
                <gazebo>
                    <plugin name="${name}_lifting_surface" filename="libLiftDragPlugin.so">
                        <a0>0</a0>
                        <alpha_stall>0.3368</alpha_stall>
                        <cla>5.418</cla>
                        <cla_stall>-2.1419</cla_stall>
                        <cda>${ 2.0 / PI }</cda>
                        <cda_stall>${ 2.0 / PI }</cda_stall>
                        <area>${ 10 * x * y }</area> <!-- using 10 times the area to enforce lower prop speeds due to simulator limitations -->
                        <air_density>1.2041</air_density>
                        <forward>0 1 0</forward>
                        <upward>0 0 1</upward>
                        <cp>0 0 0</cp>
                        <link_name>${name}</link_name>
                        <radial_symmetry>false</radial_symmetry>
                    </plugin>
                </gazebo>
            </plugin_extra>
        </xacro:box_base_link>
    </xacro:macro>

    <!-- Right and left turning motors including propellers - templates -->
    <xacro:macro name="motor_with_propeller_left" params="name">
        <xacro:cylinder_base_link name="${name}_link" m="0.05" r="0.03" l="0.03" mat="Black" />
        <joint name="${name}" type="continuous">
            <limit effort="100" velocity="1000" />
            <dynamics damping="0.0001" friction="0.01" />
            <parent link="${name}_link"/>
            <origin xyz="0 0 0.025" rpy="0 0 0"/>
            <axis xyz="0 0 1" />
            <child link="${name}_axle"/>
        </joint>
        <transmission name="${name}_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${name}">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="${name}">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
            </transmission>
        <xacro:cylinder_base_link name="${name}_axle" m="0.05" r="0.003" l="0.019" mat="Orange" />
        <joint name="${name}_blade1_joint" type="revolute">
            <!-- this must be a revolute joint due to a simulator bug. it does not actually move -->
            <limit effort="1000" velocity="0" lower="0" upper="0" />
            <parent link="${name}_axle" />
            <origin xyz="0.05 0 0" rpy="${PI/18} 0 0" /><!-- this is the angle of attack of the prop blade: 10 deg-->
            <axis xyz="0 0 1" />
            <child link="${name}_blade1"/>
        </joint>
        <xacro:wing name="${name}_blade1" m="0.005" x="0.1" y="0.015" z="0.001" mat="Orange" />
        <joint name="${name}_blade2_joint" type="revolute">
            <!-- this must be a revolute joint due to a simulator bug. it does not actually move -->
            <limit effort="1000" velocity="0" lower="0" upper="0" />
            <parent link="${name}_axle" />
            <origin xyz="-0.05 0 0" rpy="${PI/18} 0 ${PI}" /><!-- this is the angle of attack of the prop blade: 10 deg-->
            <axis xyz="0 0 1" />
            <child link="${name}_blade2"/>
        </joint>
        <xacro:wing name="${name}_blade2" m="0.005" x="0.1" y="0.015" z="0.001" mat="Orange" />
    </xacro:macro>
    <xacro:macro name="motor_with_propeller_right" params="name">
        <xacro:cylinder_base_link name="${name}_link" m="0.05" r="0.03" l="0.03" mat="Black" />
        <joint name="${name}" type="continuous">
            <limit effort="100" velocity="1000" />
            <dynamics damping="0.0001" friction="0.01" />
            <parent link="${name}_link"/>
            <origin xyz="0 0 0.025" rpy="${PI} 0 0"/><!-- note: rotated 180 deg to force reverse rotation -->
            <axis xyz="0 0 1" />
            <child link="${name}_axle"/>
        </joint>
        <transmission name="${name}_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${name}">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="${name}">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
            </transmission>
        <xacro:cylinder_base_link name="${name}_axle" m="0.05" r="0.003" l="0.019" mat="Orange" />
        <joint name="${name}_blade1_joint" type="revolute">
            <!-- this must be a revolute joint due to a simulator bug. it does not actually move -->
            <limit effort="1000" velocity="0" lower="0" upper="0" />
            <parent link="${name}_axle" />
            <origin xyz="0.05 0 0" rpy="${-PI/18} 0 0" /><!-- this is the angle of attack of the prop blade: reverse 10 deg-->
            <axis xyz="0 0 1" />
            <child link="${name}_blade1"/>
        </joint>
        <xacro:wing name="${name}_blade1" m="0.005" x="0.1" y="0.015" z="0.001" mat="Green" />
        <joint name="${name}_blade2_joint" type="revolute">
            <!-- this must be a revolute joint due to a simulator bug. it does not actually move -->
            <limit effort="1000" velocity="0" lower="0" upper="0" />
            <parent link="${name}_axle" />
            <origin xyz="-0.05 0 0" rpy="${-PI/18} 0 ${PI}" /><!-- this is the angle of attack of the prop blade: reverse 10 deg-->
            <axis xyz="0 0 1" />
            <child link="${name}_blade2"/>
        </joint>
        <xacro:wing name="${name}_blade2" m="0.005" x="0.1" y="0.015" z="0.001" mat="Green" />
    </xacro:macro>

<xacro:macro name="ft_sensor_macro" params="name_joint">
  <!-- <joint name="${name}" type="revolute">
   <parent link="${parent}"/>
   <child link="${child}"/>
   <origin rpy="0 0 0" xyz="0 0 0"/>
   <axis xyz="1 0 0"/>
   <limit effort="1000" lower="0" upper="0" velocity="10"/>
  </joint>  -->

<gazebo reference="${name_joint}">
    <provideFeedback>true</provideFeedback>
</gazebo>

<!-- The ft_sensor plugin -->  
<gazebo>
    <plugin name="ft_sensor" filename="libgazebo_ros_ft_sensor.so">
    
        <updateRate>100.0</updateRate>
        <topicName>force_torque</topicName>
        <jointName>${name_joint}</jointName>
    </plugin>
</gazebo>
</xacro:macro>



    <!-- dummy root link used for a vehicle that is not glued to the world map-->
    <link name="dummyroot" />
 




    <!-- actual vehicle definition is here, using macros -->
    <!-- flight controller - base for the sensors -->
    <!-- 2 red bars 90 degrees to each other -->
    <xacro:box_base_link name="FC" m="0.002" x="0.05" y="0.05" z="0.005" mat="Black">
        <nothing/>
    </xacro:box_base_link>
    <joint name="FC_joint" type="revolute">
        <parent link="dummyroot"/>
        <origin xyz="0 0 0.01" rpy="0 0 0"/>
        <child link="FC"/>
        <limit effort="1000" velocity="10" lower="0" upper="0" />
    </joint>



     <!-- <xacro:box_base_link name="orientation_indicator" m="0.0000001" x="0.050" y="0.05" z="0.05" mat="Black">
        <nothing/>
    </xacro:box_base_link>
    <joint name="orientation_indicator" type="fixed">
        <parent link="dummyroot"/>
        <origin xyz="0.10 0 0.01" rpy="0 0 0"/>
        <child link="orientation_indicator"/>
    </joint> -->

    <!-- 2 red bars 90 degrees to each other -->
    <joint name="dummyrootjoint" type="revolute">
        <parent link="dummyroot"/>
        <origin xyz="0 0 0" rpy="0 0 ${-PI/4}"/>
        <child link="bar0"/>
        <limit effort="1000" velocity="10" lower="0" upper="0" />
    </joint>
    <xacro:box_base_link name="bar0" m="0.1" x="0.4" y="0.01" z="0.01" mat="Red">
        <nothing/>
    </xacro:box_base_link>
    <joint name="bar_joint" type="fixed">
        <parent link="dummyroot"/>
        <origin xyz="0 0 0" rpy="0 0 ${PI/4}"/>
        <child link="bar1"/>
    </joint>
    <xacro:box_base_link name="bar1" m="0.1" x="0.4" y="0.01" z="0.01" mat="Red">
        <nothing/>
    </xacro:box_base_link>

    <!-- one motor of each type as example - please also check file:
        < rrbot_control/config/rrbot_control.yaml >
        where the motors are referenced for virtual engine controllers -->
    <joint name="bar_motor0_joint" type="fixed">
        <parent link="bar1"/>
        <origin xyz="0.18 0 0.02" rpy="0 0 0"/>
        <child link="motor0_link"/>
    </joint>
    <xacro:motor_with_propeller_right name="motor0" />

    <joint name="bar_motor2_joint" type="fixed">
        <parent link="bar1"/>
        <origin xyz="-0.18 0 0.02" rpy="0 0 0"/>
        <child link="motor2_link"/>
    </joint>
    <xacro:motor_with_propeller_right name="motor2" />

    <joint name="bar_motor1_joint" type="fixed">
        <parent link="bar0"/>
        <origin xyz="0.18 0 0.02" rpy="0 0 0"/>
        <child link="motor1_link"/>
    </joint>
    <xacro:motor_with_propeller_left name="motor1" />

    <joint name="bar_motor3_joint" type="fixed">
        <parent link="bar0"/>
        <origin xyz="-0.18 0 0.02" rpy="0 0 0"/>
        <child link="motor3_link"/>
    </joint>
    <xacro:motor_with_propeller_left name="motor3" />
    
    <!-- BEGIN force/torque sensor -->





<!-- <xacro:fixed_joint_force_torque_macro name_joint="force_torque_sensor_joint" parent="dummyroot" child="force_torque_sensor" /> -->
<!-- END force/torque sensor -->


</robot>
